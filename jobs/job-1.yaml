apiVersion: batch/v1
kind: Job
metadata:
  name: job1
spec:
  #ttlSecondsAfterFinished: 100
  template:
    spec:
      containers:
      - name: job1
        image: busybox
        command: ["echo",  "Bonjour du Job 1"]
      restartPolicy: Never

---

apiVersion: batch/v1
kind: Job
metadata:
  name: job2
spec:
  completions: 5
  parallelism: 5
  #ttlSecondsAfterFinished: 100
  template:
    spec:
      containers:
      - name: job2
        image: busybox
        command: ["process-data",  "--part=$(POD_NAME)"]
      restartPolicy: Never

---

apiVersion: batch/v1
kind: Job
metadata:
  name: parallel-work-queue-job
spec:
  #ttlSecondsAfterFinished: 100
  parallelism: 10
  template:
    spec:
      containers:
      - name: worker
        image: busybox
        command: ["process-from-queue"]
      restartPolicy: Never

---

apiVersion: batch/v1
kind: Job
metadata:
  name: job-pod-failure-policy-exemple
spec:
  completions: 12
  parallelism: 3
  # ttlSecondsAfterFinished: 100
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: main
        image: docker.io/library/alpine:latest
        command: ["sh"]
        args:
        - -c
        - echo "Bonjour le monde !" && sleep 5 && exit 42 # Simule un bug au bout de 5 secondes qui d√©clenche l'action FailJob
  backoffLimit: 6
  podFailurePolicy:
    rules:
    - action: FailJob
      onExitCodes:
        containerName: main      # optionnel
        operator: In             # In, NotIn
        values: [42]
    - action: Ignore             # Ignore, FailJob, Count
      onPodConditions:
      - type: DisruptionTarget   # indique la perturbation du Pod
